//~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
//  myTEMPLATE : Header File.h
//~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
#ifndef CONTROL_H
#define CONTROL_H

namespace Florance_CLIENT
{
	class Control
	{
		//	PUBLIC =======================================================================================================================================
		//  ==============================================================================================================================================
		//  ==============================================================================================================================================
	public:
		//	CONSTANTS ************************************************************************************************************************************
		// 	**********************************************************************************************************************************************


		//	REGISTERS ************************************************************************************************************************************
		// 	**********************************************************************************************************************************************


		//	CONSTRUCT & DESTRUCTION **********************************************************************************************************************
		// 	**********************************************************************************************************************************************
		Control()
		{
            bool initalised_CLIENT = true;
            bool* ptr_Initalised_CLIENT = &initalised_CLIENT;

            bool initalised_Thread[2] = { true, true };
            bool* ptr_Initalised_Thread[2];
			for(int index = 0; index < 2; index++) CLIENT_SYSTEM::ptr_Initalised_Thread[index] = &CLIENT_SYSTEM::initalised_Thread[index];

		}

		~Control()
		{
			//dtor
		}


		//	METHODS **************************************************************************************************************************************
		// 	**********************************************************************************************************************************************
		//	STATIC ---------------------------------------------------------------------------------------------------------------------------------------

			//	GET & SET --------------------------------------------------------------------------------------------------------------------------------
            static bool get_initalised_CLIENT();
            static void set_initalised_CLIENT(bool value);

            static bool get_initalised_Thread(int appCoreId);
            static void set_initalised_Thread(int appCoreId, bool value);

		//	DYNAMIC --------------------------------------------------------------------------------------------------------------------------------------

			//	GET & SET --------------------------------------------------------------------------------------------------------------------------------



		//	PROTECTED ====================================================================================================================================
		//  ==============================================================================================================================================
		//  ==============================================================================================================================================
	protected:
		//	CONSTANTS ************************************************************************************************************************************
		// 	**********************************************************************************************************************************************


		//	REGISTERS ************************************************************************************************************************************
		// 	**********************************************************************************************************************************************


		//	METHODS **************************************************************************************************************************************
		// 	**********************************************************************************************************************************************
		//	STATIC ---------------------------------------------------------------------------------------------------------------------------------------

			//	GET & SET --------------------------------------------------------------------------------------------------------------------------------

		//	DYNAMIC --------------------------------------------------------------------------------------------------------------------------------------

			//	GET & SET --------------------------------------------------------------------------------------------------------------------------------



		//	PRIVATE ======================================================================================================================================
		//  ==============================================================================================================================================
		//  ==============================================================================================================================================
	private:
		//	CONSTANTS ************************************************************************************************************************************
		// 	**********************************************************************************************************************************************


		//	REGISTERS ************************************************************************************************************************************
		// 	**********************************************************************************************************************************************
        struct CLIENT_SYSTEM
		{
            static bool initalised_CLIENT;
            static bool* ptr_Initalised_CLIENT;

            static bool initalised_Thread[2];
            static bool* ptr_Initalised_Thread[2];
		};
		//	METHODS **************************************************************************************************************************************
		// 	**********************************************************************************************************************************************
		//	STATIC ---------------------------------------------------------------------------------------------------------------------------------------

			//	GET & SET --------------------------------------------------------------------------------------------------------------------------------

		//	DYNAMIC --------------------------------------------------------------------------------------------------------------------------------------

			//	GET & SET --------------------------------------------------------------------------------------------------------------------------------


	};//End Class <<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<
}//End NameSpace <<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<
#endif // CONTROL_H
