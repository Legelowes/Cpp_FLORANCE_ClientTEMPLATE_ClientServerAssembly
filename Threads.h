//~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
//  AppThreads : Header File.h
//~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
#ifndef THREADS_H
#define THREADS_H
#include "GFX.h"
#include <GL/glut.h>
#include <stdlib.h>
#include <thread>
namespace Florance_CLIENT
{
	class AppThreads
	{
		//	PUBLIC =======================================================================================================================================
		//  ==============================================================================================================================================
		//  ==============================================================================================================================================
	public:
		//	CONSTANTS ************************************************************************************************************************************
		// 	**********************************************************************************************************************************************


		//	REGISTERS ************************************************************************************************************************************
		// 	**********************************************************************************************************************************************


		//	CONSTRUCT & DESTRUCTION **********************************************************************************************************************
		// 	**********************************************************************************************************************************************
		AppThreads()
		{
            int appCoreId[2] = { 0, 1 };
            int* ptr_AppCoreId[2];
            for (int index = 0; index < 2; index++) ptr_AppCoreId[index] = &appCoreId[index];

            std::thread::id sysThreadId[2] = { std::this_thread::get_id(), std::this_thread::get_id() };
            std::thread::id* ptr_SysThreadId[2];
            for (int index = 0; index < 2; index++) ptr_SysThreadId[index] = &sysThreadId[index];
		}

		~AppThreads()
		{
			//dtor
		}


		//	METHODS **************************************************************************************************************************************
		// 	**********************************************************************************************************************************************
		//	STATIC ---------------------------------------------------------------------------------------------------------------------------------------
        static void initialiseThread(std::thread::id sysThreadId, int init_CoreId);

        static void td_Periferal_Input(int init_CoreId);

			//	GET & SET --------------------------------------------------------------------------------------------------------------------------------

		//	DYNAMIC --------------------------------------------------------------------------------------------------------------------------------------

			//	GET & SET --------------------------------------------------------------------------------------------------------------------------------



		//	PROTECTED ====================================================================================================================================
		//  ==============================================================================================================================================
		//  ==============================================================================================================================================
	protected:
		//	CONSTANTS ************************************************************************************************************************************
		// 	**********************************************************************************************************************************************


		//	REGISTERS ************************************************************************************************************************************
		// 	**********************************************************************************************************************************************


		//	METHODS **************************************************************************************************************************************
		// 	**********************************************************************************************************************************************
		//	STATIC ---------------------------------------------------------------------------------------------------------------------------------------

			//	GET & SET --------------------------------------------------------------------------------------------------------------------------------

		//	DYNAMIC --------------------------------------------------------------------------------------------------------------------------------------

			//	GET & SET --------------------------------------------------------------------------------------------------------------------------------



		//	PRIVATE ======================================================================================================================================
		//  ==============================================================================================================================================
		//  ==============================================================================================================================================
	private:
		//	CONSTANTS ************************************************************************************************************************************
		// 	**********************************************************************************************************************************************


		//	REGISTERS ************************************************************************************************************************************
		// 	**********************************************************************************************************************************************
        struct CLIENT_SYSTEM
        {
            static int appCoreId[2];
            static int* ptr_AppCoreId[2];

            static std::thread::id sysThreadId[2];
            static std::thread::id* ptr_SysThreadId[2];
        };

		//	METHODS **************************************************************************************************************************************
		// 	**********************************************************************************************************************************************
		//	STATIC ---------------------------------------------------------------------------------------------------------------------------------------

			//	GET & SET --------------------------------------------------------------------------------------------------------------------------------

		//	DYNAMIC --------------------------------------------------------------------------------------------------------------------------------------

			//	GET & SET --------------------------------------------------------------------------------------------------------------------------------


	};//End Class <<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<
}//End NameSpace <<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<
#endif // THREADS_H
